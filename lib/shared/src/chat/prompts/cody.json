{
  "commands": {
    "doc": {
      "description": "Generate code documentation",
      "prompt": "Write a brief documentation comment for the selected code. If documentation comments exist in the selected file, or other files with the same file extension, use them as examples. Pay attention to the scope of the selected code (e.g. exported function/API vs implementation detail in a function), and use the idiomatic style for that type of code scope. Only generate the documentation for the selected code, do not generate the code. Do not output any other code or comments besides the documentation. Output only the comment and do not enclose it in markdown.",
      "context": {
        "currentFile": true,
        "selection": true
      },
      "mode": "insert"
    },
    "explain": {
      "description": "Explain code",
      "prompt": "Explain what the selected code does in simple terms. Assume the audience is a beginner programmer who has just learned the language features and basic syntax. Focus on explaining: 1) The purpose of the code 2) What input(s) it takes 3) What output(s) it produces 4) How it achieves its purpose through the logic and algorithm. 5) Any important logic flows or data transformations happening. Use simple language a beginner could understand. Include enough detail to give a full picture of what the code aims to accomplish without getting too technical. Format the explanation in coherent paragraphs, using proper punctuation and grammar. Write the explanation assuming no prior context about the code is known. Do not make assumptions about variables or functions not shown in the shared code. Start the answer with the name of the code that is being explained.",
      "context": {
        "currentFile": true
      }
    },
    "test": {
      "description": "Generate unit tests",
      "prompt": "Detect the programming language from the selected code. Generate a complete set of unit tests for the selected code using the testing framework and conventions shown in any shared context. Focus on testing key behaviors and covering edge cases. Use existing imports from the shared code snippets when available. If no tests exist, import a common testing library for the detected language. Do not include any markdown formatting or triple backticks. Enclose only the complete runnable test code, including all necessary imports, between the <codyresponse></codyresponse> XML tags. Be sure to import the function being tested along with all required imports.",
      "context": {
        "currentDir": true,
        "currentFile": true,
        "selection": true
      }
    },
    "smell": {
      "description": "Find code smells",
      "prompt": "Please review and analyze the {languageName} code I have selected and identify potential areas for improvement related to code smells, readability, maintainability, performance, security, etc. Do not list issues already addressed in the given code. Focus on providing up to 5 constructive suggestions that could make the code more robust, efficient, or align with best practices. For each suggestion, provide a brief explanation of the potential benefits. After listing any recommendations, summarize if you found notable opportunities to enhance the code quality overall or if the code generally follows sound design principles. If no issues found, reply 'There are no errors.'"
    }
  }
}
